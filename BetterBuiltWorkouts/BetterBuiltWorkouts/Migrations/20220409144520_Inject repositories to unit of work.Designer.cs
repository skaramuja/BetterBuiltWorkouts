// <auto-generated />
using System;
using BetterBuiltWorkouts.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BetterBuiltWorkouts.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220409144520_Inject repositories to unit of work")]
    partial class Injectrepositoriestounitofwork
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BetterBuiltWorkouts.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "358c4d41-fc0f-45b9-9874-827a7fccbd46",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "91ac89d7-9742-4748-9f4b-5eb7fd71d971",
                            Email = "drewxcom@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Drew",
                            LastName = "Crawford",
                            LockoutEnabled = false,
                            NormalizedEmail = "DREWXCOM@GMAIL.COM",
                            NormalizedUserName = "DREWXCOM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAUN/cBW6VxCUm9PVVMC7eVxJ13lTYBTdHkrZ9JTPeiWhroanvr2q7trwaN1CQYvDA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cd66b15e-0e88-4d31-9e6d-b6463125cd22",
                            TwoFactorEnabled = false,
                            UserName = "drewxcom"
                        },
                        new
                        {
                            Id = "0da27b2f-e209-4ea8-ac27-e386a45497e7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "82b0b0d2-7b67-4387-abf2-de77fd912ef8",
                            Email = "hale.l.c91@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Cody",
                            LastName = "Hale",
                            LockoutEnabled = false,
                            NormalizedEmail = "HALE.L.C91@GMAIL.COM",
                            NormalizedUserName = "CHALE",
                            PasswordHash = "AQAAAAEAACcQAAAAELBpUdzmYazHYY1ST2GF0uSwe6l+KdmQ3oRKLqth3gaAC4utda2J/09NbWOoXxPYpA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "55d8ea60-b453-4a5c-831d-604204ca78d1",
                            TwoFactorEnabled = false,
                            UserName = "chale"
                        },
                        new
                        {
                            Id = "8014ed5c-16cf-4062-8ebb-aee86f503a68",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "919cf0c6-ffe6-4994-9793-2353ddaa946d",
                            Email = "Karamuja.sabina@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sabina",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "KARAMUJA.SABINA@GMAIL.COM",
                            NormalizedUserName = "SKARAMUJA",
                            PasswordHash = "AQAAAAEAACcQAAAAEG3E43S0rUanR/z3Jtf3mnOeLr1ehzJO1xtZFIWuJlpu1JeYk+ECrTsRT2woQtDexg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b0db49f-f8f5-45e5-b3e4-301b2e2a1c35",
                            TwoFactorEnabled = false,
                            UserName = "skaramuja"
                        });
                });

            modelBuilder.Entity("BetterBuiltWorkouts.Models.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Distance")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ExerciseTypeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Reps")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Time")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Weight")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ExerciseId");

                    b.HasIndex("ExerciseTypeID");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            ExerciseId = 1,
                            ExerciseTypeID = "strength_training",
                            Image = "BackExtension.png",
                            IsPublic = true,
                            Name = "Back Extension"
                        },
                        new
                        {
                            ExerciseId = 2,
                            ExerciseTypeID = "aerobic",
                            Image = "Basketball.png",
                            IsPublic = true,
                            Name = "Basketball"
                        },
                        new
                        {
                            ExerciseId = 3,
                            ExerciseTypeID = "strength_training",
                            Image = "BenchPress.png",
                            IsPublic = true,
                            Name = "Bench Press"
                        },
                        new
                        {
                            ExerciseId = 4,
                            ExerciseTypeID = "strength_training",
                            Image = "BicepCurl.png",
                            IsPublic = true,
                            Name = "Bicep Curl"
                        },
                        new
                        {
                            ExerciseId = 5,
                            ExerciseTypeID = "aerobic",
                            Image = "Biking.png",
                            IsPublic = true,
                            Name = "Biking"
                        },
                        new
                        {
                            ExerciseId = 6,
                            ExerciseTypeID = "aerobic",
                            Image = "BriskWalking.png",
                            IsPublic = true,
                            Name = "Brisk Walking"
                        },
                        new
                        {
                            ExerciseId = 7,
                            ExerciseTypeID = "aerobic",
                            Image = "CardioClass.png",
                            IsPublic = true,
                            Name = "Cardio Class"
                        },
                        new
                        {
                            ExerciseId = 8,
                            ExerciseTypeID = "aerobic",
                            Image = "CardioMachine.png",
                            IsPublic = true,
                            Name = "Cardio Machine"
                        },
                        new
                        {
                            ExerciseId = 9,
                            ExerciseTypeID = "strength_training",
                            Image = "ChestFly.png",
                            IsPublic = true,
                            Name = "Chest Fly"
                        },
                        new
                        {
                            ExerciseId = 10,
                            ExerciseTypeID = "strength_training",
                            Image = "Crunches.png",
                            IsPublic = true,
                            Name = "Crunches"
                        },
                        new
                        {
                            ExerciseId = 11,
                            ExerciseTypeID = "aerobic",
                            Image = "Dancing.png",
                            IsPublic = true,
                            Name = "Dancing"
                        },
                        new
                        {
                            ExerciseId = 12,
                            ExerciseTypeID = "strength_training",
                            Image = "Deadlift.png",
                            IsPublic = true,
                            Name = "Deadlift"
                        },
                        new
                        {
                            ExerciseId = 13,
                            ExerciseTypeID = "aerobic",
                            Image = "GardeningAndWeeding.png",
                            IsPublic = true,
                            Name = "Gardening and Weeding"
                        },
                        new
                        {
                            ExerciseId = 14,
                            ExerciseTypeID = "aerobic",
                            Image = "Golf.png",
                            IsPublic = true,
                            Name = "Golf"
                        },
                        new
                        {
                            ExerciseId = 15,
                            ExerciseTypeID = "aerobic",
                            Image = "HighIntensityIntervalTraining.png",
                            IsPublic = true,
                            Name = "High-Intensity Interval Training"
                        },
                        new
                        {
                            ExerciseId = 16,
                            ExerciseTypeID = "aerobic",
                            Image = "Hiking.png",
                            IsPublic = true,
                            Name = "Hiking"
                        },
                        new
                        {
                            ExerciseId = 17,
                            ExerciseTypeID = "aerobic",
                            Image = "JoggingOrRunning.png",
                            IsPublic = true,
                            Name = "Jogging or Running"
                        },
                        new
                        {
                            ExerciseId = 18,
                            ExerciseTypeID = "strength_training",
                            Image = "LateralRaise.png",
                            IsPublic = true,
                            Name = "Lateral Raise"
                        },
                        new
                        {
                            ExerciseId = 19,
                            ExerciseTypeID = "strength_training",
                            Image = "LegCurl.png",
                            IsPublic = true,
                            Name = "Leg Curl"
                        },
                        new
                        {
                            ExerciseId = 20,
                            ExerciseTypeID = "strength_training",
                            Image = "LegExtension.png",
                            IsPublic = true,
                            Name = "Leg Extension"
                        },
                        new
                        {
                            ExerciseId = 21,
                            ExerciseTypeID = "strength_training",
                            Image = "LegPress.png",
                            IsPublic = true,
                            Name = "Leg Press"
                        },
                        new
                        {
                            ExerciseId = 22,
                            ExerciseTypeID = "strength_training",
                            Image = "Lunge.png",
                            IsPublic = true,
                            Name = "Lunge"
                        },
                        new
                        {
                            ExerciseId = 23,
                            ExerciseTypeID = "aerobic",
                            Image = "LiftingWeights.png",
                            IsPublic = true,
                            Name = "Lifting Weights"
                        },
                        new
                        {
                            ExerciseId = 24,
                            ExerciseTypeID = "balance",
                            Image = "Pilates.png",
                            IsPublic = true,
                            Name = "Pilates"
                        },
                        new
                        {
                            ExerciseId = 25,
                            ExerciseTypeID = "strength_training",
                            Image = "PullDown.png",
                            IsPublic = true,
                            Name = "Pull-down"
                        },
                        new
                        {
                            ExerciseId = 26,
                            ExerciseTypeID = "strength_training",
                            Image = "PullUp.png",
                            IsPublic = true,
                            Name = "Pull-up"
                        },
                        new
                        {
                            ExerciseId = 27,
                            ExerciseTypeID = "strength_training",
                            Image = "PushUps.png",
                            IsPublic = true,
                            Name = "Push-ups"
                        },
                        new
                        {
                            ExerciseId = 28,
                            ExerciseTypeID = "aerobic",
                            Image = "ResistanceExercise.png",
                            IsPublic = true,
                            Name = "Resistance Exercise with Elastic Bands or Tubes"
                        },
                        new
                        {
                            ExerciseId = 29,
                            ExerciseTypeID = "aerobic",
                            Image = "Rowing.png",
                            IsPublic = true,
                            Name = "Rowing"
                        },
                        new
                        {
                            ExerciseId = 30,
                            ExerciseTypeID = "strength_training",
                            Image = "SeatedCalfRaise.png",
                            IsPublic = true,
                            Name = "Seated Calf Raise"
                        },
                        new
                        {
                            ExerciseId = 31,
                            ExerciseTypeID = "strength_training",
                            Image = "ShoulderPress.png",
                            IsPublic = true,
                            Name = "Shoulder Press"
                        },
                        new
                        {
                            ExerciseId = 32,
                            ExerciseTypeID = "strength_training",
                            Image = "ShoulderShrug.png",
                            IsPublic = true,
                            Name = "Shoulder Shrug"
                        },
                        new
                        {
                            ExerciseId = 33,
                            ExerciseTypeID = "aerobic",
                            Image = "Soccer.png",
                            IsPublic = true,
                            Name = "Soccer"
                        },
                        new
                        {
                            ExerciseId = 34,
                            ExerciseTypeID = "strength_training",
                            Image = "Squat.png",
                            IsPublic = true,
                            Name = "Squat"
                        },
                        new
                        {
                            ExerciseId = 35,
                            ExerciseTypeID = "aerobic",
                            Image = "Stairs.png",
                            IsPublic = true,
                            Name = "Stairs"
                        },
                        new
                        {
                            ExerciseId = 36,
                            ExerciseTypeID = "strength_training",
                            Image = "StandingCalfRaise.png",
                            IsPublic = true,
                            Name = "Standing Calf Raise"
                        },
                        new
                        {
                            ExerciseId = 37,
                            ExerciseTypeID = "aerobic",
                            Image = "StrengthClass.png",
                            IsPublic = true,
                            Name = "Strength Class"
                        },
                        new
                        {
                            ExerciseId = 38,
                            ExerciseTypeID = "aerobic",
                            Image = "Swimming.png",
                            IsPublic = true,
                            Name = "Swimming"
                        },
                        new
                        {
                            ExerciseId = 39,
                            ExerciseTypeID = "balance",
                            Image = "TaiChi.png",
                            IsPublic = true,
                            Name = "Tai Chi"
                        },
                        new
                        {
                            ExerciseId = 40,
                            ExerciseTypeID = "aerobic",
                            Image = "Tennis.png",
                            IsPublic = true,
                            Name = "Tennis"
                        },
                        new
                        {
                            ExerciseId = 41,
                            ExerciseTypeID = "strength_training",
                            Image = "TricepExtension.png",
                            IsPublic = true,
                            Name = "Tricep Extension"
                        },
                        new
                        {
                            ExerciseId = 42,
                            ExerciseTypeID = "aerobic",
                            Image = "UltimateFrisbee.png",
                            IsPublic = true,
                            Name = "Ultimate Frisbee"
                        },
                        new
                        {
                            ExerciseId = 43,
                            ExerciseTypeID = "strength_training",
                            Image = "UprightRow.png",
                            IsPublic = true,
                            Name = "Upright Row"
                        },
                        new
                        {
                            ExerciseId = 44,
                            ExerciseTypeID = "aerobic",
                            Image = "Volleyball.png",
                            IsPublic = true,
                            Name = "Volleyball"
                        },
                        new
                        {
                            ExerciseId = 45,
                            ExerciseTypeID = "aerobic",
                            Image = "WalkingWithStroller.png",
                            IsPublic = true,
                            Name = "Walking with a Stroller"
                        },
                        new
                        {
                            ExerciseId = 46,
                            ExerciseTypeID = "aerobic",
                            Image = "Yoga.png",
                            IsPublic = true,
                            Name = "Yoga"
                        },
                        new
                        {
                            ExerciseId = 47,
                            ExerciseTypeID = "streching",
                            Image = "CalfStretch.png",
                            IsPublic = true,
                            Name = "Calf Stretch"
                        },
                        new
                        {
                            ExerciseId = 48,
                            ExerciseTypeID = "streching",
                            Image = "HamstringStretch.png",
                            IsPublic = true,
                            Name = "Hamstring Stretch"
                        },
                        new
                        {
                            ExerciseId = 49,
                            ExerciseTypeID = "streching",
                            Image = "QuadricepsStretch.png",
                            IsPublic = true,
                            Name = "Quadriceps Stretch"
                        },
                        new
                        {
                            ExerciseId = 50,
                            ExerciseTypeID = "streching",
                            Image = "HipFlexorsStretch.png",
                            IsPublic = true,
                            Name = "Hip Flexors Stretch"
                        },
                        new
                        {
                            ExerciseId = 51,
                            ExerciseTypeID = "streching",
                            Image = "KneeToChestStretch.png",
                            IsPublic = true,
                            Name = "Knee-to-Chest Stretch"
                        },
                        new
                        {
                            ExerciseId = 52,
                            ExerciseTypeID = "streching",
                            Image = "ShoulderStretch.png",
                            IsPublic = true,
                            Name = "Shoulder Stretch"
                        },
                        new
                        {
                            ExerciseId = 53,
                            ExerciseTypeID = "streching",
                            Image = "NeckStretch.png",
                            IsPublic = true,
                            Name = "Neck Stretch"
                        },
                        new
                        {
                            ExerciseId = 54,
                            ExerciseTypeID = "balance",
                            Image = "TightropeWalk.png",
                            IsPublic = true,
                            Name = "Tightrope Walk"
                        },
                        new
                        {
                            ExerciseId = 55,
                            ExerciseTypeID = "balance",
                            Image = "FlamingoStand.png",
                            IsPublic = true,
                            Name = "Flamingo Stand"
                        },
                        new
                        {
                            ExerciseId = 56,
                            ExerciseTypeID = "balance",
                            Image = "HeelToToeWalk.png",
                            IsPublic = true,
                            Name = "Heel-to-Toe Walk"
                        },
                        new
                        {
                            ExerciseId = 57,
                            ExerciseTypeID = "balance",
                            Image = "BandedTriplanarToeTaps.png",
                            IsPublic = true,
                            Name = "Banded Triplanar Toe Taps"
                        });
                });

            modelBuilder.Entity("BetterBuiltWorkouts.Models.ExercisePlan", b =>
                {
                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.HasKey("ExerciseId", "PlanId");

                    b.HasIndex("PlanId");

                    b.ToTable("ExercisePlans");

                    b.HasData(
                        new
                        {
                            ExerciseId = 1,
                            PlanId = 1
                        },
                        new
                        {
                            ExerciseId = 2,
                            PlanId = 1
                        },
                        new
                        {
                            ExerciseId = 3,
                            PlanId = 1
                        },
                        new
                        {
                            ExerciseId = 4,
                            PlanId = 2
                        },
                        new
                        {
                            ExerciseId = 5,
                            PlanId = 2
                        },
                        new
                        {
                            ExerciseId = 6,
                            PlanId = 2
                        },
                        new
                        {
                            ExerciseId = 7,
                            PlanId = 3
                        },
                        new
                        {
                            ExerciseId = 8,
                            PlanId = 3
                        },
                        new
                        {
                            ExerciseId = 9,
                            PlanId = 3
                        });
                });

            modelBuilder.Entity("BetterBuiltWorkouts.Models.ExerciseType", b =>
                {
                    b.Property<string>("ExerciseTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExerciseTypeID");

                    b.ToTable("ExerciseTypes");

                    b.HasData(
                        new
                        {
                            ExerciseTypeID = "aerobic",
                            Name = "Aerobic"
                        },
                        new
                        {
                            ExerciseTypeID = "strength_training",
                            Name = "Strength Training"
                        },
                        new
                        {
                            ExerciseTypeID = "streching",
                            Name = "Stretching"
                        },
                        new
                        {
                            ExerciseTypeID = "balance",
                            Name = "Balance"
                        },
                        new
                        {
                            ExerciseTypeID = "other",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("BetterBuiltWorkouts.Models.Plan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TimesCompleted")
                        .HasColumnType("int");

                    b.HasKey("PlanId");

                    b.ToTable("Plans");

                    b.HasData(
                        new
                        {
                            PlanId = 1,
                            CreatedBy = "Better Built Systems",
                            End = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Default Plan 1",
                            Start = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PlanId = 2,
                            CreatedBy = "Better Built Systems",
                            End = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Default Plan 2",
                            Start = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PlanId = 3,
                            CreatedBy = "Better Built Systems",
                            End = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Default Plan 3",
                            Start = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "4a6f932d-16dd-420d-87e2-6d6dee1af6dd",
                            ConcurrencyStamp = "4a6f932d-16dd-420d-87e2-6d6dee1af6dd",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "59a8e319-8781-4d6a-b56a-0afbd5d8bf42",
                            ConcurrencyStamp = "59a8e319-8781-4d6a-b56a-0afbd5d8bf42",
                            Name = "Suspended",
                            NormalizedName = "SUSPENDED"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "358c4d41-fc0f-45b9-9874-827a7fccbd46",
                            RoleId = "4a6f932d-16dd-420d-87e2-6d6dee1af6dd"
                        },
                        new
                        {
                            UserId = "0da27b2f-e209-4ea8-ac27-e386a45497e7",
                            RoleId = "4a6f932d-16dd-420d-87e2-6d6dee1af6dd"
                        },
                        new
                        {
                            UserId = "8014ed5c-16cf-4062-8ebb-aee86f503a68",
                            RoleId = "4a6f932d-16dd-420d-87e2-6d6dee1af6dd"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BetterBuiltWorkouts.Models.Exercise", b =>
                {
                    b.HasOne("BetterBuiltWorkouts.Models.ExerciseType", "ExerciseType")
                        .WithMany("Exercises")
                        .HasForeignKey("ExerciseTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExerciseType");
                });

            modelBuilder.Entity("BetterBuiltWorkouts.Models.ExercisePlan", b =>
                {
                    b.HasOne("BetterBuiltWorkouts.Models.Exercise", "Exercise")
                        .WithMany("ExercisePlans")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetterBuiltWorkouts.Models.Plan", "Plan")
                        .WithMany("ExercisePlans")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BetterBuiltWorkouts.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BetterBuiltWorkouts.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BetterBuiltWorkouts.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BetterBuiltWorkouts.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BetterBuiltWorkouts.Models.Exercise", b =>
                {
                    b.Navigation("ExercisePlans");
                });

            modelBuilder.Entity("BetterBuiltWorkouts.Models.ExerciseType", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("BetterBuiltWorkouts.Models.Plan", b =>
                {
                    b.Navigation("ExercisePlans");
                });
#pragma warning restore 612, 618
        }
    }
}
